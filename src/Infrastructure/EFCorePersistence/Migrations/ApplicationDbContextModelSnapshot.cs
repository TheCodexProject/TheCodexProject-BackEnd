// <auto-generated />
using System;
using EFCorePersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCorePersistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("domain.models.user.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("domain.models.workItem.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AssigneeId");

                    b.Property<string>("Priority")
                        .HasColumnType("TEXT")
                        .HasColumnName("Priority");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("Status");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.ToTable("WorkItems", (string)null);
                });

            modelBuilder.Entity("domain.models.user.User", b =>
                {
                    b.OwnsOne("domain.models.user.values.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(75)
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("domain.models.user.values.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(75)
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("domain.models.user.values.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(75)
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("FirstName");

                    b.Navigation("LastName");
                });

            modelBuilder.Entity("domain.models.workItem.WorkItem", b =>
                {
                    b.HasOne("domain.models.user.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("domain.models.shared.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("WorkItemId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("TEXT")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("TEXT")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("TEXT")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("WorkItemId");

                            b1.ToTable("WorkItems");

                            b1.WithOwner()
                                .HasForeignKey("WorkItemId");
                        });

                    b.OwnsOne("domain.models.workItem.values.WorkItemDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("WorkItemId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description");

                            b1.HasKey("WorkItemId");

                            b1.ToTable("WorkItems");

                            b1.WithOwner()
                                .HasForeignKey("WorkItemId");
                        });

                    b.OwnsOne("domain.models.workItem.values.WorkItemTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("WorkItemId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(75)
                                .HasColumnType("TEXT")
                                .HasColumnName("Title");

                            b1.HasKey("WorkItemId");

                            b1.ToTable("WorkItems");

                            b1.WithOwner()
                                .HasForeignKey("WorkItemId");
                        });

                    b.Navigation("Assignee");

                    b.Navigation("Description");

                    b.Navigation("Metadata");

                    b.Navigation("Title");
                });
#pragma warning restore 612, 618
        }
    }
}
